!function(){"use strict";class t{constructor(t,e){this.lat=t,this.long=e}static coordsPattern=/([-+]?\d+\.\d+),\s*([-+]?\d+\.\d+)/;static checkCoords(e){let n,i;const o=e.match(t.coordsPattern);if(o)return n=o[1],i=o[2],new t(n,i);throw new Error("Wrong format coordinates. It must be: number, number")}}class e{constructor(t,e){this.sec=t,this.min=e}}class n{constructor(t,e){this.id=Math.floor(performance.now()),this.content=t,this.date=new Date,this.type=e}getCoordinates(){return new Promise(((t,e)=>{navigator.geolocation.getCurrentPosition(t,e)}))}async getPosition(){let e;try{e=await this.getCoordinates()}catch{throw console.log("No access to geolocation"),new Error("No access to geolocation")}const{latitude:n,longitude:i}=e.coords;console.log(`lat ${n}`),console.log(`long ${i}`),this.position=new t(n,i)}}class i{constructor(t){this.posts=[],t&&t.forEach((t=>{this.posts.push(t)}))}add(t){this.posts.unshift(t)}}const o=new class{constructor(t){this.containerName=t,this.postList=new i,this.onAddSubmit=this.onAddSubmit.bind(this),this.onWarningCancel=this.onWarningCancel.bind(this),this.onAddVideoSubmit=this.onAddVideoSubmit.bind(this),this.updateTimer=this.updateTimer.bind(this),this.onStopVideoAndHide=this.onStopVideoAndHide.bind(this),this.onWarningSubmit=this.onWarningSubmit.bind(this)}addFormMarkup(){return'\n        <form class="create-post" name="create-post">\n            <input type="text" class="post-text" name="post-text"> \n            <span class="post-video material-icons">videocam</span>\n        </form>\n    '}warningFormMarkup(){return'\n        <form class="warning" name="warning">\n            <label for="warning-position">\n                We\'re sorry.\n                But something went wrong, we couldn\'t get your position.\n                Please allow access to your position or input your position \n                into field below in format: latitude, longitude.\n            </label>\n            <input type="text" class="warning-position" name="warning-position" id="warning-position">\n            <input type="submit" value="OK" class="warning__submit">\n            <input type="button" value="Cancel" class="warning__cancel">\n        </form>\n    '}bindToDOM(){this.container=document.querySelector(this.containerName)}bindToDOMAdd(){this.form=document.querySelector(".create-post"),this.inputElem=this.form.querySelector(".post-text"),this.videoBtn=this.form.querySelector(".post-video"),this.videoPlayer=document.querySelector(".video"),this.videoControls=document.querySelector(".video-controls"),this.videoTimer=document.querySelector(".video-timer"),this.videoSaveBtn=document.querySelector(".video-save"),this.videoCancelBtn=document.querySelector(".video-cancel"),this.form.addEventListener("submit",this.onAddSubmit),this.videoBtn.addEventListener("click",this.onAddVideoSubmit),this.videoSaveBtn.addEventListener("click",this.onStopVideoAndHide),this.videoCancelBtn.addEventListener("click",this.onStopVideoAndHide)}bindToDOMWarning(){this.warningForm=document.querySelector(".warning"),this.inputPosElem=this.warningForm.querySelector(".warning-position"),this.cancelBtn=this.warningForm.querySelector(".warning__cancel"),this.cancelBtn.addEventListener("click",this.onWarningCancel)}renderPost(t){return"video"===t.type?`\n        <div class="post" data-id="${t.id}">\n            <div class="post__date">\n              ${t.date.getDate().toString().padStart(2,"0")}.${t.date.getMonth().toString().padStart(2,"0")}.${t.date.getFullYear()} ${t.date.getHours().toString().padStart(2,"0")}:${t.date.getMinutes().toString().padStart(2,"0")}\n            </div>\n            <div class="post__content">\n              <video class="${t.content.className}" src="${t.content.src}" controls>\n              </video>\n            </div>\n            <div class="post__position">\n              [${t.position.lat}, ${t.position.long}]\n            </div>\n        </div>\n    `:`\n        <div class="post" data-id="${t.id}">\n            <div class="post__date">\n              ${t.date.getDate().toString().padStart(2,"0")}.${t.date.getMonth().toString().padStart(2,"0")}.${t.date.getFullYear()} ${t.date.getHours().toString().padStart(2,"0")}:${t.date.getMinutes().toString().padStart(2,"0")}\n            </div>\n            <div class="post__content">\n              ${t.content}\n            </div>\n            <div class="post__position">\n              [${t.position.lat}, ${t.position.long}]\n            </div>\n        </div>\n    `}renderPosts(){const t=document.createElement("div");t.className="post-container",this.container.insertBefore(t,this.form),this.postList.posts.forEach((e=>{const n=this.renderPost(e);t.insertAdjacentHTML("beforeend",n)})),this.postContainer=t}renderWarning(){const t=document.createElement("form");t.className="warning",t.name="warning",t.innerHTML=this.warningFormMarkup(),this.container.insertBefore(t,null)}renderContent(){this.renderPosts();const t=document.createElement("form");t.className="create-post",t.name="create-post",t.innerHTML=this.addFormMarkup(),this.container.insertBefore(t,null),this.bindToDOMAdd()}clearPosts(){Array.from(this.postContainer.querySelectorAll(".post")).forEach((t=>{t.remove()}))}updatePosts(){this.postList.posts.forEach((t=>{const e=this.renderPost(t);this.postContainer.insertAdjacentHTML("beforeend",e)}))}async createPostShowAll(t,e){const i=new n(t,e);try{await i.getPosition()}catch{this.currentPost=i,await this.showWarning()}this.postList.add(i),this.inputElem.value="",this.clearPosts(),this.updatePosts()}async onAddSubmit(t){t.preventDefault();const e=this.inputElem.value.trim();await this.createPostShowAll(e,"text")}async showWarning(){this.renderWarning(),this.bindToDOMWarning(),this.warningClosed=new Promise(((t,e)=>{this.warningForm.addEventListener("submit",(e=>{try{this.onWarningSubmit(e),t()}catch(t){}}))})),await this.warningClosed}onWarningSubmit(e){e.preventDefault();const n=this.inputPosElem.value;try{this.currentPost.position=t.checkCoords(n)}catch(t){throw console.log(t),alert(t),new Error(t)}this.warningForm.remove()}onWarningCancel(t){this.warningForm.remove()}updateTimer(){59===this.timer.sec?(this.timer.min++,this.timer.sec=0):this.timer.sec++,this.videoTimer.textContent=`${this.timer.min.toString().padStart(2,"0")}:${this.timer.sec.toString().padStart(2,"0")}`}toggleVideoBlock(){this.videoPlayer.classList.toggle("video_active"),this.videoControls.classList.toggle("video-controls_active")}onStopVideoAndHide(t){"video-cancel"===t.target.className&&(this.cancelled=!0),this.recorder.stop(),this.stream.getTracks().forEach((t=>t.stop())),this.toggleVideoBlock(),this.videoBtn.classList.toggle("hidden")}async onAddVideoSubmit(t){this.videoBtn.classList.toggle("hidden");const n=await navigator.mediaDevices.getUserMedia({video:!0,audio:!0});this.stream=n,this.videoPlayer.srcObject=n,this.videoPlayer.muted=!0,this.toggleVideoBlock(),this.form.appendChild(this.videoControls),this.videoPlayer.addEventListener("canplay",(()=>{this.timer=new e(0,0),setInterval(this.updateTimer,1e3),this.videoPlayer.play()}));const i=new MediaRecorder(n);this.recorder=i;const o=[];i.addEventListener("start",(()=>{console.log("start"),this.cancelled=!1})),i.addEventListener("dataavailable",(t=>{o.push(t.data)})),i.addEventListener("stop",(async()=>{if(!this.cancelled){const t=new Blob(o),e=document.createElement("video");e.className="video-post",e.controls=!0,e.src=URL.createObjectURL(t),await this.createPostShowAll(e,"video")}})),i.start()}}(".container");o.bindToDOM(),o.renderContent()}();